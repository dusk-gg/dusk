import { Point } from "../../logic/types.ts"
import {
  shadowBlur,
  deadCircleRadius,
  deathRevealDelayMs,
  defaultTransitionMs,
} from "./drawConfig.ts"
import { easeOutCubic } from "../../lib/easeOutCubic.ts"
import { clamp } from "../../lib/clamp.ts"
import { remap } from "../../lib/remap.ts"

export function drawDeadEnd(
  ctx: CanvasRenderingContext2D,
  scale: number,
  point: Point,
  color: string,
  diedAt: number | undefined,
) {
  if (diedAt) {
    ctx.globalAlpha = easeOutCubic(
      clamp(
        remap(
          Rune.gameTime(),
          [
            diedAt + deathRevealDelayMs,
            diedAt + deathRevealDelayMs + defaultTransitionMs,
          ],
          [0, 1],
        ),
        [0, 1],
      ),
    )
  }

  ctx.beginPath()
  ctx.arc(
    point.x * scale,
    point.y * scale,
    deadCircleRadius * window.devicePixelRatio,
    0,
    2 * Math.PI,
  )

  ctx.fillStyle = color
  ctx.shadowColor = color
  ctx.shadowBlur = shadowBlur * window.devicePixelRatio

  ctx.fill()
  ctx.fill()

  const skullWidth = 16
  const skullHeight = 18.41
  const skullPaths = [
    "M7.06591 7.68671C7.3282 7.89932 7.44828 8.30044 7.44828 8.92895C7.44828 9.74337 6.96191 10.4091 6.42065 10.8914C5.87402 11.3785 5.22362 11.7228 4.78652 11.8936L4.76884 11.9005L4.75042 11.9049C4.35896 11.997 3.75749 12.0246 3.2383 11.776C2.97326 11.6492 2.72801 11.449 2.55086 11.1502C2.37417 10.852 2.27586 10.4737 2.27586 10.0071C2.27586 9.0738 2.62837 8.44893 3.08946 8.06028C3.53906 7.68132 4.07375 7.54132 4.43825 7.5275L4.44326 7.52731H6.41379C6.42338 7.52731 6.43624 7.52672 6.45187 7.526C6.56973 7.52057 6.84532 7.50789 7.06591 7.68671ZM6.50147 8.10176C6.47568 8.10203 6.44668 8.10234 6.41379 8.10234H4.45354C4.18574 8.11358 3.77502 8.22197 3.4364 8.50739C3.10727 8.78481 2.82759 9.24412 2.82759 10.0071C2.82759 10.3888 2.90744 10.6576 3.02026 10.848C3.13262 11.0375 3.28823 11.1672 3.4686 11.2535C3.83328 11.4281 4.2903 11.4199 4.61077 11.3481C5.00125 11.193 5.58168 10.8825 6.06211 10.4544C6.55533 10.0149 6.89655 9.49459 6.89655 8.92895C6.89655 8.33551 6.77525 8.17956 6.72719 8.14061C6.67695 8.09988 6.62782 8.10041 6.50147 8.10176Z",
    "M8.93409 7.68671C8.6718 7.89932 8.55172 8.30044 8.55172 8.92895C8.55172 9.74337 9.03809 10.4091 9.57935 10.8914C10.126 11.3785 10.7764 11.7228 11.2135 11.8936L11.2312 11.9005L11.2496 11.9049C11.641 11.997 12.2425 12.0246 12.7617 11.776C13.0267 11.6492 13.272 11.449 13.4491 11.1502C13.6258 10.852 13.7241 10.4737 13.7241 10.0071C13.7241 9.0738 13.3716 8.44893 12.9105 8.06028C12.4609 7.68132 11.9262 7.54132 11.5617 7.5275L11.5567 7.52731H9.58621C9.57662 7.52731 9.56376 7.52672 9.54813 7.526C9.43027 7.52057 9.15468 7.50789 8.93409 7.68671ZM9.49853 8.10176C9.52432 8.10203 9.55332 8.10234 9.58621 8.10234H11.5465C11.8143 8.11358 12.225 8.22197 12.5636 8.50739C12.8927 8.78481 13.1724 9.24412 13.1724 10.0071C13.1724 10.3888 13.0926 10.6576 12.9797 10.848C12.8674 11.0375 12.7118 11.1672 12.5314 11.2535C12.1667 11.4281 11.7097 11.4199 11.3892 11.3481C10.9988 11.193 10.4183 10.8825 9.93789 10.4544C9.44467 10.0149 9.10345 9.49459 9.10345 8.92895C9.10345 8.33551 9.22475 8.17956 9.27281 8.14061C9.32305 8.09988 9.37218 8.10041 9.49853 8.10176Z",
    "M8 0.698822L8.00246 0.698845C9.31776 0.711085 11.2938 1.01066 12.9517 1.88145C14.6174 2.75628 16 4.2335 16 6.59288V6.61116L15.9978 6.62929C15.9282 7.19703 15.7149 8.7327 15.0755 10.0974C14.9543 10.3559 14.9405 10.6455 14.9983 10.9786C15.0571 11.317 15.1842 11.672 15.3225 12.0555L15.3323 12.0826C15.5054 12.5626 15.6988 13.0988 15.7057 13.6103C15.7093 13.8793 15.6623 14.1497 15.5326 14.4083C15.403 14.6666 15.1992 14.8965 14.9127 15.0974C14.1007 15.6671 12.9158 15.8983 12.3045 16.0177L12.2857 16.0214C12.1774 16.0425 12.0901 16.0596 12.0233 16.0745C11.8374 16.116 11.7232 16.1705 11.6686 16.2551C11.6235 16.325 11.5622 16.5117 11.7395 16.982C11.9073 17.4272 11.8019 17.7986 11.6132 18.0565C11.4392 18.2942 11.1914 18.4413 11.0287 18.4812L10.7439 18.551L10.6937 18.2506C10.6425 17.9434 10.4401 17.7918 10.3086 17.7737C10.2495 17.7655 10.2116 17.7822 10.1846 17.8114C10.1536 17.8449 10.1034 17.9326 10.1034 18.1294V18.847L8.29789 19.1083L8.31055 18.7653C8.31523 18.6384 8.29522 18.4534 8.233 18.3125C8.17567 18.1826 8.10609 18.1294 8 18.1294C7.89391 18.1294 7.82433 18.1826 7.767 18.3125C7.70478 18.4534 7.68477 18.6384 7.68945 18.7653L7.70211 19.1083L5.89655 18.847V18.1294C5.89655 17.9326 5.84642 17.8449 5.81541 17.8114C5.78844 17.7822 5.75047 17.7655 5.69139 17.7737C5.55989 17.7918 5.35752 17.9434 5.30627 18.2506L5.25613 18.551L4.9713 18.4812C4.80857 18.4413 4.56079 18.2942 4.3868 18.0565C4.19813 17.7986 4.09268 17.4272 4.26048 16.982C4.43776 16.5117 4.3765 16.325 4.33142 16.2551C4.27685 16.1705 4.16259 16.116 3.97668 16.0745C3.90985 16.0596 3.82258 16.0425 3.71434 16.0214L3.69552 16.0177C3.08415 15.8983 1.89933 15.6671 1.08734 15.0974C0.800832 14.8965 0.597012 14.6666 0.467439 14.4083C0.337729 14.1497 0.290714 13.8793 0.294327 13.6103C0.301196 13.0988 0.494588 12.5626 0.667742 12.0826L0.677525 12.0555C0.81578 11.672 0.942879 11.317 1.00166 10.9786C1.05952 10.6455 1.0457 10.3559 0.924533 10.0974C0.285086 8.7327 0.0717608 7.19703 0.00222046 6.62929L0 6.61116V6.59288C0 4.2335 1.3826 2.75628 3.04827 1.88145C4.70624 1.01066 6.68224 0.711085 7.99754 0.698845L8 0.698822ZM0.551755 6.57477C0.622346 7.14608 0.829467 8.58412 1.42029 9.84501C1.6107 10.2514 1.6148 10.6767 1.54456 11.081C1.47605 11.4755 1.33163 11.876 1.19867 12.2447L1.19399 12.2577C1.00873 12.7715 0.851379 13.2176 0.845997 13.6183C0.84342 13.8102 0.876616 13.9829 0.956363 14.1419C1.03625 14.3011 1.17113 14.4631 1.39541 14.6204C2.10396 15.1175 3.18406 15.3328 3.81595 15.4562L3.819 15.4568C3.92335 15.4771 4.01761 15.4955 4.09229 15.5122C4.28569 15.5554 4.60246 15.6447 4.78927 15.9342C4.98557 16.2385 4.97603 16.6563 4.774 17.1923C4.68463 17.4294 4.74011 17.5911 4.82549 17.7077C4.84358 17.7325 4.86341 17.7555 4.8842 17.7767C5.0441 17.4587 5.32163 17.2446 5.61895 17.2036C5.82712 17.1749 6.04776 17.2341 6.21261 17.4123C6.3734 17.5861 6.44828 17.8372 6.44828 18.1294V18.3463L7.15898 18.4492C7.17815 18.3258 7.21161 18.1948 7.26576 18.0721C7.38027 17.8127 7.60954 17.5544 8 17.5544C8.39046 17.5544 8.61973 17.8127 8.73424 18.0721C8.78839 18.1948 8.82184 18.3258 8.84102 18.4492L9.55172 18.3463V18.1294C9.55172 17.8372 9.6266 17.5861 9.78739 17.4123C9.95224 17.2341 10.1729 17.1749 10.381 17.2036C10.6784 17.2446 10.9559 17.4587 11.1158 17.7767C11.1366 17.7555 11.1564 17.7325 11.1745 17.7077C11.2599 17.5911 11.3154 17.4294 11.226 17.1923C11.024 16.6563 11.0144 16.2385 11.2107 15.9342C11.3975 15.6447 11.7143 15.5554 11.9077 15.5122C11.9824 15.4955 12.0766 15.4771 12.181 15.4568L12.1841 15.4562C12.8159 15.3328 13.896 15.1175 14.6046 14.6204C14.8289 14.4631 14.9638 14.3011 15.0436 14.1419C15.1234 13.9829 15.1566 13.8102 15.154 13.6183C15.1486 13.2176 14.9913 12.7715 14.806 12.2577L14.8013 12.2448C14.6684 11.876 14.524 11.4755 14.4554 11.081C14.3852 10.6767 14.3893 10.2514 14.5797 9.84501C15.1705 8.58412 15.3777 7.14607 15.4482 6.57477C15.4413 4.51686 14.2516 3.20809 12.7034 2.39496C11.144 1.57593 9.25941 1.28595 8 1.27387C6.74059 1.28595 4.85597 1.57593 3.29656 2.39496C1.74837 3.20809 0.558693 4.51687 0.551755 6.57477Z",
    "M8.02857 11.3438L8.25732 11.6705C8.4179 11.8999 8.65744 12.2734 8.85826 12.6551C8.95866 12.8459 9.05206 13.0438 9.12104 13.2301C9.18786 13.4105 9.24138 13.605 9.24138 13.7808C9.24138 13.9944 9.17961 14.1757 9.07259 14.3206C8.96856 14.4614 8.83276 14.5534 8.70305 14.6138C8.44915 14.732 8.17158 14.7511 8.03448 14.7511C7.87865 14.7511 7.60326 14.7081 7.35719 14.5826C7.10931 14.4562 6.82759 14.2076 6.82759 13.7808C6.82759 13.6156 6.88343 13.4272 6.94885 13.2553C7.01744 13.075 7.11026 12.8787 7.21007 12.6868C7.40988 12.3027 7.64826 11.9164 7.80767 11.6764L8.02857 11.3438ZM8.03933 12.3537C7.92645 12.5391 7.80421 12.7512 7.6951 12.9609C7.60095 13.1419 7.5192 13.3162 7.46171 13.4673C7.40105 13.6267 7.37931 13.7302 7.37931 13.7808C7.37931 13.893 7.44241 13.9859 7.5997 14.0661C7.7588 14.1472 7.94893 14.1761 8.03448 14.1761C8.13876 14.1761 8.32672 14.1592 8.47798 14.0888C8.55086 14.0548 8.60256 14.0143 8.63538 13.9698C8.66522 13.9294 8.68966 13.8726 8.68966 13.7808C8.68966 13.7122 8.66559 13.5972 8.60633 13.4372C8.54924 13.283 8.46807 13.1094 8.3745 12.9316C8.26828 12.7297 8.14954 12.5288 8.03933 12.3537Z",
  ]

  const skull = new Path2D()
  const transforms = new DOMMatrix()

  transforms.translateSelf(point.x * scale, point.y * scale)
  transforms.scaleSelf(window.devicePixelRatio)
  transforms.scaleSelf()
  transforms.translateSelf(-skullWidth / 2, -skullHeight / 2)

  for (const path of skullPaths) {
    skull.addPath(new Path2D(path), transforms)
  }

  ctx.fillStyle = "black"
  ctx.shadowBlur = 0
  ctx.fill(skull)

  ctx.globalAlpha = 1
}
